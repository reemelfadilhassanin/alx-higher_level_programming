How to use ``2-matrix_divided`` module
======================================

Import matrix_divided from 2-matrix_divided:

>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Check matrix in regulare way:

	>>> matrix_divided([[1, 2, 3],[4, 5, 6]], 2)
	[[0.5, 1.0, 1.5], [2.0, 2.5, 3.0]]
	>>> matrix_divided([[6]], 2)
	[[3.0]]
	>>> matrix_divided(10, 5)
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats
	>>> matrix_divided([[6, 9, 18], [3, 27, 3]], -3)
	[[-2.0, -3.0, -6.0], [-1.0, -9.0, -1.0]]
	>>> matrix_divided([[1, 2]])
	Traceback (most recent call last):
	TypeError: matrix_divided() missing 1 required positional argument: 'div'
	>>> matrix_divided([[2, 4, 8], [1, 3]], 2)
	Traceback (most recent call last):
	...
	TypeError: Each row of the matrix must have the same size
	>>> matrix_divided()
	Traceback (most recent call last):
	TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'
	>>> matrix_divided([[1, 2, 3],[9, 8, 2]], 0)
	Traceback (most recent call last):
	ZeroDivisionError: division by zero
	>>> matrix_divided([[3, 4, 0], [10, 5, 3]], float('inf'))
	[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]
	>>> matrix_divided([[3, 4, 0], [10, 5, 3]], float('-inf'))
	[[-0.0, -0.0, -0.0], [-0.0, -0.0, -0.0]]
	>>> matrix_divided([[1, 4, 2], [7, 6, 9]], float('nan'))
	[[nan, nan, nan], [nan, nan, nan]]
	
Check the dimension of matrix is valid:

	>>> matrix_divided(none, 9)
	Traceback (most recent call last):
	...
	NameError: name 'none' is not defined
	>>> matrix_divided([[]], 3)
	Traceback (most recent call last):
	...
	TypeError: matrix must be a matrix (list of lists) of integers/floats
	>>> matrix_divided([[0, 4,5]])
	Traceback (most recent call last):
	TypeError: matrix_divided() missing 1 required positional argument: 'div'
	>>> matrix_divided([[1, 2, 3],[10, 8, 7]], "h")
	Traceback (most recent call last):
	TypeError: div must be a number
	>>> matrix_divided([[1, 0, 2], [3, "matrix", 4]], 2)
	Traceback (most recent call last):
	...
	TypeError: matrix must be a matrix (list of lists) of integers/floats
	>>> matrix_divided([[], []], 3)
	Traceback (most recent call last):
	...
	TypeError: matrix must be a matrix (list of lists) of integers/floats
	>>> matrix_divided([[], []], -3)
	Traceback (most recent call last):
	...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

Check if is mtrix:

	>>> matrix_divided("abc", 1)
	Traceback (most recent call last):
	...
	TypeError: matrix must be a matrix (list of lists) of integers/floats
