=================================
The ``101-lazy_matrix_mul`` module
=================================

``lazy_matrix_mul()`` using the numpy module to multiplies two matrices .

Import the function lazy_matrix_mul:
::

    >>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul

Usage In Regulare Way:
::

	>>> print(lazy_matrix_mul([[1, -2], [-5, 6]], [[2, 3], [4, -7]]))
	[[ -6  17]
	 [ 14 -57]]
	>>> print(lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]]))
	[[ 7 10]
	 [15 22]]
	>>> print(lazy_matrix_mul([[1, 2]], [[3.0, 4], [5, 6.0]]))
	[[13. 16.]]
	>>> print(lazy_matrix_mul([[1, 5], [9, 11]], [[10, 20, 30], [0, 1, 2]]))
	[[ 10  25  40]
	 [ 90 191 292]]
	

Test the matrix dimensions:

	>>> print(lazy_matrix_mul([[1, 5], [9, 11]], [[5, 6], [10, 20], [3, 15]]))
	Traceback (most recent call last):
	ValueError: shapes (2,2) and (3,2) not aligned: 2 (dim 1) != 3 (dim 0)
	>>> print(lazy_matrix_mul([[2, 1], [4, 3]], [[6], [7, 5]]))
	Traceback (most recent call last):
	ValueError: setting an array element with a sequence.
	>>> print(lazy_matrix_mul([[9, 8]], 2))
	Traceback (most recent call last):
	ValueError: Scalar operands are not allowed, use '*' instead
	>>> print(lazy_matrix_mul([], [[4, 10]]))
	Traceback (most recent call last):
	ValueError: shapes (0,) and (1,2) not aligned: 0 (dim 0) != 1 (dim 0)
	>>> print(lazy_matrix_mul([[4, 10]], []))
	Traceback (most recent call last):
	ValueError: shapes (1,2) and (0,) not aligned: 2 (dim 1) != 0 (dim 0)
	>>> print(lazy_matrix_mul([[1, 2]], [[]]))
	Traceback (most recent call last):
	ValueError: shapes (1,2) and (1,0) not aligned: 2 (dim 1) != 1 (dim 0)
	>>> print(lazy_matrix_mul([[1, 2], [0]], [[3, 9], [10, 19]]))
	Traceback (most recent call last):
	ValueError: setting an array element with a sequence.
	>>> print(lazy_matrix_mul([[4, 7, 2], [11, 5, 10]], [[4, 8], [13, 5]]))
	Traceback (most recent call last):
	ValueError: shapes (2,3) and (2,2) not aligned: 3 (dim 1) != 2 (dim 0)
	>>> print(lazy_matrix_mul([[1, 2, 3], [4, 5, 6]], [[2, 8], [10, 9], [12, 11], [12, 13]]))
	Traceback (most recent call last):
	ValueError: shapes (2,3) and (4,2) not aligned: 3 (dim 1) != 4 (dim 0)
	>>> print(lazy_matrix_mul([[3, 2], [11, 8.0]], [[10], [6, 0]]))
	Traceback (most recent call last):
	ValueError: setting an array element with a sequence.
	>>> print(lazy_matrix_mul([[1, 2], [3, 4]], [[5, 6, 3], [7, 8]]))
	Traceback (most recent call last):
	ValueError: setting an array element with a sequence.
	>>> print(lazy_matrix_mul([[1, 2], [3, 4]],  [[7, 8], [5, 6, 3]]))
	Traceback (most recent call last):
	ValueError: setting an array element with a sequence.
	>>> print(lazy_matrix_mul(None, None))
	Traceback (most recent call last):
	TypeError: Object arrays are not currently supported
	>>> print(lazy_matrix_mul("not a list", "also not a list"))
	Traceback (most recent call last):
	ValueError: Scalar operands are not allowed, use '*' instead


Test if not element integer:

	>>> print(lazy_matrix_mul([[3, 'a'], ['b', 1]], [['c', 5], [6, 'd']]))
	Traceback (most recent call last):
	TypeError: invalid data type for einsum

	>>> print(lazy_matrix_mul([['a', 'b'], ['f', 'd']], [['c', 'f'], ['m', 'h']]))
	Traceback (most recent call last):
	TypeError: Cannot cast scalar from dtype('bool') to dtype('<U1') according to the rule 'safe'
	>>> print(lazy_matrix_mul([['a', 'b'], ['c', 'd']], [['h'], ['g', 'k']]))
	Traceback (most recent call last):
	ValueError: setting an array element with a sequence
	>>> print(lazy_matrix_mul("Daysss", [[1, 2]]))
	Traceback (most recent call last):
	ValueError: Scalar operands are not allowed, use '*' instead
	>>> print(lazy_matrix_mul(["Hello", "There"], [[1, 2]]))
	Traceback (most recent call last):
	ValueError: shapes (2,) and (1,2) not aligned: 2 (dim 0) != 1 (dim 0)
	>>> print(lazy_matrix_mul([[1, 2]], ["Hello", "There"]))
	Traceback (most recent call last):
	TypeError: invalid data type for einsum
	>>> print(lazy_matrix_mul([[1, 7], ["Hello", 8]], [[1, 2], [3, 10]]))
	Traceback (most recent call last):
	TypeError: invalid data type for einsum
	>>> print(lazy_matrix_mul([[5, 7], [4, 10]], [[100, 13], ["Daysss", 100]]))
	Traceback (most recent call last):
	TypeError: invalid data type for einsum

Now test if element is float:

 	>>> print(lazy_matrix_mul([[1.5, 2.5], [3.5, 4.5]], [[2.5, 1.5], [4.5, 3.5]]))
	[[15. 11.]
	 [29. 21.]]

    >>> print(lazy_matrix_mul([[1.0, 2.0]], [[3.0, 4.0], [5.0, 6.0]]))
    [[13. 16.]]
    >>> print(lazy_matrix_mul([[1.5, -2.5], [-5.5, 6.5]], [[2.5, 3.5], [4.5, -7.5]]))
    [[ -7.5  24. ]
     [ 15.5 -68. ]]
      
   

    >>> print(lazy_matrix_mul([[1.0, 2.0], [3.0, 4.0]], [[5.0, 6.0], [7.0, 8.0], [9.0, 10.0]]))
    Traceback (most recent call last):
    ValueError: shapes (2,2) and (3,2) not aligned: 2 (dim 1) != 3 (dim 0)
    >>> print(lazy_matrix_mul([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]], [[7.0, 8.0, 9.0], [10.0, 11.0, 12.0], [13.0, 14.0, 15.0]]))
    [[ 66.  72.  78.]
     [156. 171. 186.]]
    >>> print(lazy_matrix_mul([[1.0, 2.0], [3.0, 4.0]], [[5.0, 6.0], [7.0, 8.0], [9.0, 10.0], [11.0, 12.0]]))
    Traceback (most recent call last):
    ValueError: shapes (2,2) and (4,2) not aligned: 2 (dim 1) != 4 (dim 0)
	>>> print(lazy_matrix_mul([[1.0, 2.0], [3.0, 4.0]], [[5.0, 6.0], [7.0, 8.0], [9.0, 10.0], [11.0, 12.0]]))
	Traceback (most recent call last):
	ValueError: shapes (2,2) and (4,2) not aligned: 2 (dim 1) != 4 (dim 0)
   
    >>> print(lazy_matrix_mul([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]], [[10.0, 11.0], [12.0, 13.0], [14.0, 15.0]]))
    [[ 76.  82.]
     [184. 199.]
     [292. 316.]]
    >>> print(lazy_matrix_mul([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]], [[10.0], [11.0, 12.0], [13.0, 14.0]]))
    Traceback (most recent call last):
    ValueError: setting an array element with a sequence.
    >>> print(lazy_matrix_mul([[1.0, 2.0], [3.0, 4.0]], [[5.0, 6.0], [7.0, 8.0], [9.0, 10.0], [11.0, 12.0], [13.0, 14.0]]))
    Traceback (most recent call last):
    ValueError: shapes (2,2) and (5,2) not aligned: 2 (dim 1) != 5 (dim 0)


    