
``1-my_list`` module
====================

Importing the class from the module:
>>> MyList = __import__("1-my_list").MyList

Testing module docstring:
>>> m = __import__("1-my_list").__doc__
>>> len(m) > 1
True

Testing class docstring:
>>> c = __import__("1-my_list").MyList.__doc__
>>> len(c) > 1
True

Testing method docstring
        >>> f = __import__("1-my_list").MyList.print_sorted.__doc__
        >>> len(f) > 1
        True

Testingg given test case
>>> my_list = MyList()
Testing appending works
>>> my_list.append(1)

>>> my_list.append(4)

>>> my_list.append(2)

>>> my_list.append(3)

>>> my_list.append(5)

>>> print(my_list)
[1, 4, 2, 3, 5]

>>> my_list.print_sorted()
[1, 2, 3, 4, 5]

>>> print(my_list)
[1, 4, 2, 3, 5]

Testing empty 
>>> o1 = MyList()

>>> print(o1)
[]

>>> o1.print_sorted()
[]

Testing negative nums
>>> o2 = MyList()

>>> o2.append(-1)

>>> o2.append(0)

>>> o2.append(-233)

>>> o2.append(-9)

>>> print(o2)
[-1, 0, -233, -9]

>>> o2.print_sorted()
[-233, -9, -1, 0]

Testing NULL
>>> o3 = MyList()

>>> o3.append(NULL)
Traceback (most recent call last):
    ...
NameError: name 'NULL' is not defined

>>> print(o3)
[]

>>> o3.print_sorted()
[]

Testing NaN
>>> o4 = MyList()

>>> o4.append(NaN)
Traceback (most recent call last):
    ...
NameError: name 'NaN' is not defined

>>> print(o4)
[]

>>> o4.print_sorted()
[]

Testing None
>>> o5 = MyList()

>>> o5.append(None)

>>> print(o5)
[None]

>>> o5.print_sorted()
[None]
